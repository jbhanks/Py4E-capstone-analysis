_ = ''
_i = '# Define shared dataset configurations\nSHARED_DATASET_CONFIGS = {\n    "prefix": PROJECT_DATA,\n    "cols_to_drop": [ # These columns are dropped from all datasets because I decided I won\'t need them\n        "id",\n        "sid",\n        "position",\n        "created_at",\n        "created_meta",\n        "updated_at",\n        "updated_meta",\n        "borough",\n        "meta",\n    ],\n    "cols_to_rename": {}, # These are columns that are to be renamed in all datasets\n    "lookup_columns": [],\n    "dtype_exceptions": { # These are columns that are to be cast to a specific data type\n        "zip_code": String,\n        "meta_data": String,\n        "postcode": String,\n        "calendar_date": Date,\n        "number": Integer,\n        "text": String,\n        "point": String,\n    },\n}\n\n# Define specific dataset configurations\nspecific_dataset_configs = {\n    "lien_data": {\n        "prefix": f"{PROJECT_DATA}/intermediate_files",\n        "cols_to_drop": [],\n        "cols_to_rename": {"BORO": "borough"},\n        "lookup_columns": [],\n        "dtype_exceptions": {},\n    },\n    "assessment_data": {\n        "prefix": f"{PROJECT_DATA}/intermediate_files",\n        "cols_to_drop": [],\n        "cols_to_rename": {\n            "BLDGCL": "building_class",\n            "TAXCLASS": "tax_class_code",\n            "Zip Codes": "zip_code",\n        },\n        "lookup_columns": ["building_class", "street_name", "owner", "zip_code"],\n        "dtype_exceptions": {},\n    },\n}'
_ii = 'print(type(response))'
_iii = "for name,dataset in datasets.items():\n    response = requests.get(dataset.metadata_url, timeout=10)\n    response.raise_for_status()\n    metadata = response.json()\n    datasets[name] = Dataset(\n        main_url=dataset.main_url,\n        data_dict_url=[attachment['filename'] if 'dictionary' in attachment['filename'].casefold() else None for attachment in metadata['metadata']['attachments']],\n        other_files= [attachment if 'dictionary' not in attachment['filename'].casefold() else None for attachment in metadata['metadata']['attachments']],\n        name=metadata['name'],\n        short_name=name,\n        attribution=metadata['attribution'],\n        createdAt=metadata['createdAt'],\n        description=metadata['description'],\n        provenance=metadata['provenance'],\n        publicationDate=metadata['publicationDate'],\n        rowsUpdatedAt=metadata['rowsUpdatedAt'],\n        columns={col['name']: col['dataTypeName'] for col in metadata['columns']}\n    )\n    time.sleep(5)"
_i1 = 'import os\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import List\nimport re\nimport requests\nfrom sqlalchemy import Integer, Float, String, Date, LargeBinary, Boolean\nimport dill'
List = typing.List
Float = sqlalchemy.sql.sqltypes.Float
String = sqlalchemy.sql.sqltypes.String
Date = sqlalchemy.sql.sqltypes.Date
LargeBinary = sqlalchemy.sql.sqltypes.LargeBinary
Boolean = sqlalchemy.sql.sqltypes.Boolean
_i2 = '# Directory where the data folder for this analysis is to be created\nDATADIR = "/home/james/Massive/PROJECTDATA"\n\n# Name of the folder in which the project data is stored\nPROJECT_NAME = "nyc_real_estate"'
DATADIR = '/home/james/Massive/PROJECTDATA'
PROJECT_NAME = 'nyc_real_estate'
_i3 = '# Create paths that will be frequently used throughout the project\nPROJECT_PATH = os.getcwd()\nPROJECT_DATA = f"{DATADIR}/{PROJECT_NAME}_data"\nSQLITE_PATH = f\'sqlite:///{PROJECT_DATA}/{PROJECT_NAME}_db.sqlite\'\n\n# Set them environment variables for later use\nos.environ["PROJECT_DATA"] = PROJECT_DATA\nos.environ["PROJECT_NAME"] = PROJECT_NAME\nos.environ["SQLITE_PATH"] = SQLITE_PATH\nos.chdir(PROJECT_PATH)\n\n# Create necessary directories from the paths\nos.makedirs(PROJECT_DATA, exist_ok=True) # Make the main directory for the project downloads and data\nos.makedirs(f"{PROJECT_DATA}/downloads", exist_ok=True) # Make the download directory\nos.makedirs(f"{PROJECT_DATA}/intermediate_files", exist_ok=True) # Location for intermediate files\nos.makedirs(f"{PROJECT_DATA}/files_to_use", exist_ok=True) # Location where cleaned data to be directly used in analysis is stored\nos.makedirs(f"environment_data", exist_ok=True) # Directory to store environment files, excluded in .gitignore'
PROJECT_PATH = '/home/james/Gits/Py4E-capstone-analysis'
PROJECT_DATA = '/home/james/Massive/PROJECTDATA/nyc_real_estate_data'
SQLITE_PATH = 'sqlite:////home/james/Massive/PROJECTDATA/nyc_real_estate_data/nyc_real_estate_db.sqlite'
_i4 = '# Dataclass to hold information about an NYC Open Data dataset, to filled with metadata provided by the API\n@dataclass\nclass Dataset:\n    """Class to hold dataset metadata"""\n    main_url: str # The url for the dataset\'s main page\n    id: str = field(init=False) # the string ID used by NYC Open Data. In most cases, this is enough to construct all needed URLs.\n    metadata_url: str = field(init=False) # The download URL for the dataset\n    data_url: str = field(init=False) # The download URL for the dataset\n    data_dict_url: str = None # The URL for the dataset\'s data dictionary\n    other_files: List[str] = None # A list of other files associated with the dataset\n    name: str = None # The name of the dataset\n    short_name: str = None # My shortened name for the dataset\n    attribution: str = None # The attribution for the dataset according to NYC Open Data\n    createdAt: str = None # The date the dataset was created by NYC Open Data\n    description: str = None # NYC Open Data\'s description of the dataset\n    provenance: str = None # NYC Open Data\'s provenance for the dataset\n    publicationDate: str = None # Publication date of the dataset\n    rowsUpdatedAt: str = None # The date the dataset was last updated at the time of metadata retrieval\n    columns: dict = field(default_factory=dict) # A dictionary of the columns in the dataset and their data types\n\n    def __post_init__(self):\n        self.id = re.sub(r\'.*/(.*)/about_data\', r\'\\1\', self.main_url) # Extract the ID from the main URL\n        self.metadata_url = f\'https://data.cityofnewyork.us/api/views/{self.id}.json\'\n        self.data_url = f\'https://data.cityofnewyork.us/api/views/{self.id}/rows.json?accessType=DOWNLOAD\''
Dataset = __main__.Dataset
_i5 = 'datasets = {\n    "pluto": Dataset(\n        main_url="https://data.cityofnewyork.us/City-Government/Property-Valuation-and-Assessment-Data/yjxr-fw8i/about_data"\n    ),\n    "assessments": Dataset(\n        main_url="https://data.cityofnewyork.us/City-Government/Property-Valuation-and-Assessment-Data/yjxr-fw8i/about_data"\n    ),\n    "tax_liens": Dataset(\n        main_url="https://data.cityofnewyork.us/City-Government/Tax-Lien-Sale-Lists/9rz4-mjek/about_data"\n    ),\n    "housing_violations": Dataset(\n        main_url="https://data.cityofnewyork.us/Housing-Development/Housing-Maintenance-Code-Violations/wvxf-dwi5/about_data"\n    ),\n    "assessment_actions": Dataset(\n        main_url="https://data.cityofnewyork.us/City-Government/Assessment-Actions/4nft-bihw/about_data"\n    ),\n    "housing_database": Dataset(\n        main_url="https://data.cityofnewyork.us/Housing-Development/Housing-Database/6umk-irkx/about_data"\n    ),\n}'
datasets = {'pluto': Dataset(main_url='https://data.cityofnewyork.us/City-Government/Property-Valuation-and-Assessment-Data/yjxr-fw8i/about_data', id='yjxr-fw8i', metadata_url='https://data.cityofnewyork.us/api/views/yjxr-fw8i.json', data_url='https://data.cityofnewyork.us/api/views/yjxr-fw8i/rows.json?accessType=DOWNLOAD', data_dict_url=['Property_Valuation_and_Assessment_Data_Dictionary.xlsx'], other_files=[None], name='Property Valuation and Assessment Data', short_name='pluto', attribution='Department of Finance (DOF)', createdAt=1558462821, description='Real Estate Assessment Property data.\r\nThe Department of Finance values properties every year as one step in calculating property tax bills.', provenance='official', publicationDate=1590531410, rowsUpdatedAt=1590526784, columns={'BBLE': 'text', 'BORO': 'number', 'BLOCK': 'number', 'LOT': 'number', 'EASEMENT': 'text', 'OWNER': 'text', 'BLDGCL': 'text', 'TAXCLASS': 'text', 'LTFRONT': 'number', 'LTDEPTH': 'number', 'EXT': 'text', 'STORIES': 'number', 'FULLVAL': 'number', 'AVLAND': 'number', 'AVTOT': 'number', 'EXLAND': 'number', 'EXTOT': 'number', 'EXCD1': 'number', 'STADDR': 'text', 'POSTCODE': 'number', 'EXMPTCL': 'text', 'BLDFRONT': 'number', 'BLDDEPTH': 'number', 'AVLAND2': 'number', 'AVTOT2': 'number', 'EXLAND2': 'number', 'EXTOT2': 'number', 'EXCD2': 'number', 'PERIOD': 'text', 'YEAR': 'text', 'VALTYPE': 'text', 'Borough': 'text', 'Latitude': 'number', 'Longitude': 'number', 'Community Board': 'number', 'Council District': 'number', 'Census Tract': 'number', 'BIN': 'number', 'NTA': 'text', 'New Georeferenced Column': 'point', 'Zip Codes': 'number', 'Community Districts': 'number', 'Borough Boundaries': 'number', 'City Council Districts': 'number', 'Police Precincts': 'number'}), 'assessments': Dataset(main_url='https://data.cityofnewyork.us/City-Government/Property-Valuation-and-Assessment-Data/yjxr-fw8i/about_data', id='yjxr-fw8i', metadata_url='https://data.cityofnewyork.us/api/views/yjxr-fw8i.json', data_url='https://data.cityofnewyork.us/api/views/yjxr-fw8i/rows.json?accessType=DOWNLOAD', data_dict_url=['Property_Valuation_and_Assessment_Data_Dictionary.xlsx'], other_files=[None], name='Property Valuation and Assessment Data', short_name='assessments', attribution='Department of Finance (DOF)', createdAt=1558462821, description='Real Estate Assessment Property data.\r\nThe Department of Finance values properties every year as one step in calculating property tax bills.', provenance='official', publicationDate=1590531410, rowsUpdatedAt=1590526784, columns={'BBLE': 'text', 'BORO': 'number', 'BLOCK': 'number', 'LOT': 'number', 'EASEMENT': 'text', 'OWNER': 'text', 'BLDGCL': 'text', 'TAXCLASS': 'text', 'LTFRONT': 'number', 'LTDEPTH': 'number', 'EXT': 'text', 'STORIES': 'number', 'FULLVAL': 'number', 'AVLAND': 'number', 'AVTOT': 'number', 'EXLAND': 'number', 'EXTOT': 'number', 'EXCD1': 'number', 'STADDR': 'text', 'POSTCODE': 'number', 'EXMPTCL': 'text', 'BLDFRONT': 'number', 'BLDDEPTH': 'number', 'AVLAND2': 'number', 'AVTOT2': 'number', 'EXLAND2': 'number', 'EXTOT2': 'number', 'EXCD2': 'number', 'PERIOD': 'text', 'YEAR': 'text', 'VALTYPE': 'text', 'Borough': 'text', 'Latitude': 'number', 'Longitude': 'number', 'Community Board': 'number', 'Council District': 'number', 'Census Tract': 'number', 'BIN': 'number', 'NTA': 'text', 'New Georeferenced Column': 'point', 'Zip Codes': 'number', 'Community Districts': 'number', 'Borough Boundaries': 'number', 'City Council Districts': 'number', 'Police Precincts': 'number'}), 'tax_liens': Dataset(main_url='https://data.cityofnewyork.us/City-Government/Tax-Lien-Sale-Lists/9rz4-mjek/about_data', id='9rz4-mjek', metadata_url='https://data.cityofnewyork.us/api/views/9rz4-mjek.json', data_url='https://data.cityofnewyork.us/api/views/9rz4-mjek/rows.json?accessType=DOWNLOAD', data_dict_url=['DOF_TaxlienList_Data_Dictionary1__1_.xlsx'], other_files=[None], name='Tax Lien Sale Lists', short_name='tax_liens', attribution='Department of Finance (DOF)', createdAt=1457134320, description='Properties with tax and/or water liens that are potentially eligible to be included in the next lien sale.</p>Tax Lien Sale Lists : Properties with tax, water liens and other charges  that are potentially eligible to be included in the next lien sale plus tax liens which were eventually sold.', provenance='official', publicationDate=1561053491, rowsUpdatedAt=1642102491, columns={'Month': 'calendar_date', 'Cycle': 'text', 'Borough': 'number', 'Block ': 'number', 'Lot': 'number', 'Tax Class Code': 'number', 'Building Class': 'text', 'Community Board': 'number', 'Council District': 'number', 'House Number': 'text', 'Street Name': 'text', 'Zip Code': 'text', 'Water Debt Only': 'text'}), 'housing_violations': Dataset(main_url='https://data.cityofnewyork.us/Housing-Development/Housing-Maintenance-Code-Violations/wvxf-dwi5/about_data', id='wvxf-dwi5', metadata_url='https://data.cityofnewyork.us/api/views/wvxf-dwi5.json', data_url='https://data.cityofnewyork.us/api/views/wvxf-dwi5/rows.json?accessType=DOWNLOAD', data_dict_url=[None, 'Housing_Maintenance_Code_Violations_Data_Dictionary.xlsx'], other_files=[{'filename': 'Housing_Maintenance_Code_Violations_User_Guide_V3.docx', 'assetId': 'f734ef66-f9ba-4dfa-9aae-2b681ff89c10', 'name': 'Housing_Maintenance_Code_Violations_User_Guide_V3.docx'}, None], name='Housing Maintenance Code Violations', short_name='housing_violations', attribution='Department of Housing Preservation and Development (HPD)', createdAt=1384804187, description='Pursuant to New York City’s Housing Maintenance Code, the Department of Housing Preservation and Development (HPD) issues violations against conditions, in rental dwelling units and buildings, that have been verified to violate the New York City Housing Maintenance Code (HMC) or the New York State Multiple Dwelling Law (MDL).\r\nEach row in this dataset contains discrete information about one violation of the New York City Housing Maintenance Code or New York State Multiple Dwelling Law. Each violation is identified using a unique Violation ID. These Laws are in place to provide requirements for the maintenance of residential dwelling units within New York City. \r\nViolations are issued by Housing Inspectors after a physical inspection is conducted (except for class I violations which are generally  administratively issued).  Violations are issued in four classes: Class A (non-hazardous), Class B (hazardous), Class C (immediately hazardous) and Class I (information orders).  For more information on violations, see https://www1.nyc.gov/site/hpd/owners/compliance-clear-violations.page  \r\nThe base data for this file is all violations open as of October 1, 2012.  Violation data is updated daily.  The daily update includes both new violations and updates to the status of previously issued violations. An open violation is a violation which is still active on the Department records. See the status table for determining how to filter for open violations versus closed violations, and within open violations for a more detailed current status. \r\nThe property owner may or may not have corrected the physical condition if the status is open. The violation status is closed when the violation is observed/verified as corrected by HPD or as certified by the landlord.   The processes for having violations dismissed are described at http://www1.nyc.gov/site/hpd/owners/compliance-clear-violations.page\r\nUsing other HPD datasets, such as the Building File or the Registration File, a user can link together violations issued for given buildings or for given owners.', provenance='official', publicationDate=1604708119, rowsUpdatedAt=1738857345, columns={'ViolationID': 'number', 'BuildingID': 'number', 'RegistrationID': 'number', 'BoroID': 'number', 'Borough': 'text', 'HouseNumber': 'text', 'LowHouseNumber': 'text', 'HighHouseNumber': 'text', 'StreetName': 'text', 'StreetCode': 'text', 'Postcode': 'text', 'Apartment': 'text', 'Story': 'text', 'Block': 'number', 'Lot': 'number', 'Class': 'text', 'InspectionDate': 'calendar_date', 'ApprovedDate': 'calendar_date', 'OriginalCertifyByDate': 'calendar_date', 'OriginalCorrectByDate': 'calendar_date', 'NewCertifyByDate': 'calendar_date', 'NewCorrectByDate': 'calendar_date', 'CertifiedDate': 'calendar_date', 'OrderNumber': 'text', 'NOVID': 'number', 'NOVDescription': 'text', 'NOVIssuedDate': 'calendar_date', 'CurrentStatusID': 'number', 'CurrentStatus': 'text', 'CurrentStatusDate': 'calendar_date', 'NovType': 'text', 'ViolationStatus': 'text', 'RentImpairing': 'text', 'Latitude': 'text', 'Longitude': 'text', 'CommunityBoard': 'text', 'CouncilDistrict': 'text', 'CensusTract': 'text', 'BIN': 'text', 'BBL': 'text', 'NTA': 'text'}), 'assessment_actions': Dataset(main_url='https://data.cityofnewyork.us/City-Government/Assessment-Actions/4nft-bihw/about_data', id='4nft-bihw', metadata_url='https://data.cityofnewyork.us/api/views/4nft-bihw.json', data_url='https://data.cityofnewyork.us/api/views/4nft-bihw/rows.json?accessType=DOWNLOAD', data_dict_url=['NYCTC_Assessment_Actions_Data_Dictionary_07102019.xlsx'], other_files=[None], name='Assessment Actions', short_name='assessment_actions', attribution='New York City Tax Commission (TAXCOMM)', createdAt=1362168130, description='Assessment Actions\r\nActions on Applications for Reducing Assessments or Reclassifying Property. Listed here are Tax Commission actions for reducing assessments or reclassifying property. KEY: YR=Assessment year; B=Borough (1=Manhattan, 2=Bronx, 3=Brooklyn, 4=Queens, 5=Staten Island); TC=Tax Class or subclass. Classification claims. Reductions are expressed in total actual assessed value. For condominiums, actions shown are for representative lots only.', provenance='official', publicationDate=1688050153, rowsUpdatedAt=1714658443, columns={'Borough Code': 'number', 'Block Number': 'number', 'Lot Number': 'number', 'Tax Year': 'number', 'Owner Name': 'text', 'Property Address': 'text', 'Granted Reduction Amount': 'number', 'Tax Class Code': 'text'}), 'housing_database': Dataset(main_url='https://data.cityofnewyork.us/Housing-Development/Housing-Database/6umk-irkx/about_data', id='6umk-irkx', metadata_url='https://data.cityofnewyork.us/api/views/6umk-irkx.json', data_url='https://data.cityofnewyork.us/api/views/6umk-irkx/rows.json?accessType=DOWNLOAD', data_dict_url=['Housing_Database_Data_Dictionary.xlsx'], other_files=[None], name='Housing Database', short_name='housing_database', attribution='Department of City Planning (DCP)', createdAt=1616112466, description='The NYC Department of City Planning’s (DCP) <a href = "https://www.nyc.gov/site/planning/data-maps/open-data/dwn-housing-database.page#housingdevelopmentproject">Housing Database</a> contains all NYC Department of Buildings (DOB) approved housing construction and demolition jobs filed or completed in NYC since January 1, 2010. It includes the three primary construction job types that add or remove residential units: new buildings, major alterations, and demolitions, and can be used to determine the change in legal housing units across time and space. Records in the Housing Database Project-Level Files are geocoded to the greatest level of precision possible, subject to numerous quality assurance and control checks, recoded for usability, and joined to other housing data sources relevant to city planners and analysts.\n\nData are updated semiannually, at the end of the second and fourth quarters of each year.\n\nPlease see DCP’s annual Housing Production Snapshot summarizing findings from the 21Q4 data release <a href="https://storymaps.arcgis.com/stories/1c9138dc24064b2e8142ff156345a719">here</a>. Additional Housing and Economic analyses are also <a href="https://www.nyc.gov/site/planning/planning-level/housing-economy/housing-economy.page">available</a>.\n\nThe NYC Department of City Planning’s (DCP) <a href="https://www.nyc.gov/site/planning/data-maps/open-data/dwn-housing-database.page#housingdevelopmentunit">Housing Database Unit Change Summary Files</a> provide the net change in Class A housing units since 2010, and the count of units pending completion for commonly used political and statistical boundaries (Census Block, Census Tract, City Council district, Community District, Community District Tabulation Area (CDTA), Neighborhood Tabulation Area (NTA). These tables are aggregated from the DCP Housing Database Project-Level Files, which is derived from Department of Buildings (DOB) approved housing construction and demolition jobs filed or completed in NYC since January 1, 2010. Net housing unit change is calculated as the sum of all three construction job types that add or remove residential units: new buildings, major alterations, and demolitions. These files can be used to determine the change in legal housing units across time and space.', provenance='official', publicationDate=1616113006, rowsUpdatedAt=1616112466, columns={})}
_i6 = "for name,dataset in datasets.items():\n    response = requests.get(dataset.metadata_url, timeout=10)\n    response.raise_for_status()\n    metadata = response.json()\n    datasets[name] = Dataset(\n        main_url=dataset.main_url,\n        data_dict_url=[attachment['filename'] if 'dictionary' in attachment['filename'].casefold() else None for attachment in metadata['metadata']['attachments']],\n        other_files= [attachment if 'dictionary' not in attachment['filename'].casefold() else None for attachment in metadata['metadata']['attachments']],\n        name=metadata['name'],\n        short_name=name,\n        attribution=metadata['attribution'],\n        createdAt=metadata['createdAt'],\n        description=metadata['description'],\n        provenance=metadata['provenance'],\n        publicationDate=metadata['publicationDate'],\n        rowsUpdatedAt=metadata['rowsUpdatedAt'],\n        columns={col['name']: col['dataTypeName'] for col in metadata['columns']}\n    )\n    time.sleep(5)"
name = 'housing_database'
dataset = Dataset(main_url='https://data.cityofnewyork.us/Housing-Development/Housing-Database/6umk-irkx/about_data', id='6umk-irkx', metadata_url='https://data.cityofnewyork.us/api/views/6umk-irkx.json', data_url='https://data.cityofnewyork.us/api/views/6umk-irkx/rows.json?accessType=DOWNLOAD', data_dict_url=None, other_files=None, name=None, short_name=None, attribution=None, createdAt=None, description=None, provenance=None, publicationDate=None, rowsUpdatedAt=None, columns={})
response = <Response [200]>
metadata = {'id': '6umk-irkx', 'name': 'Housing Database', 'assetType': 'href', 'attribution': 'Department of City Planning (DCP)', 'attributionLink': 'https://www.nyc.gov/site/planning/data-maps/open-data/dwn-housing-database.page', 'averageRating': 0, 'category': 'Housing & Development', 'createdAt': 1616112466, 'description': 'The NYC Department of City Planning’s (DCP) <a href = "https://www.nyc.gov/site/planning/data-maps/open-data/dwn-housing-database.page#housingdevelopmentproject">Housing Database</a> contains all NYC Department of Buildings (DOB) approved housing construction and demolition jobs filed or completed in NYC since January 1, 2010. It includes the three primary construction job types that add or remove residential units: new buildings, major alterations, and demolitions, and can be used to determine the change in legal housing units across time and space. Records in the Housing Database Project-Level Files are geocoded to the greatest level of precision possible, subject to numerous quality assurance and control checks, recoded for usability, and joined to other housing data sources relevant to city planners and analysts.\n\nData are updated semiannually, at the end of the second and fourth quarters of each year.\n\nPlease see DCP’s annual Housing Production Snapshot summarizing findings from the 21Q4 data release <a href="https://storymaps.arcgis.com/stories/1c9138dc24064b2e8142ff156345a719">here</a>. Additional Housing and Economic analyses are also <a href="https://www.nyc.gov/site/planning/planning-level/housing-economy/housing-economy.page">available</a>.\n\nThe NYC Department of City Planning’s (DCP) <a href="https://www.nyc.gov/site/planning/data-maps/open-data/dwn-housing-database.page#housingdevelopmentunit">Housing Database Unit Change Summary Files</a> provide the net change in Class A housing units since 2010, and the count of units pending completion for commonly used political and statistical boundaries (Census Block, Census Tract, City Council district, Community District, Community District Tabulation Area (CDTA), Neighborhood Tabulation Area (NTA). These tables are aggregated from the DCP Housing Database Project-Level Files, which is derived from Department of Buildings (DOB) approved housing construction and demolition jobs filed or completed in NYC since January 1, 2010. Net housing unit change is calculated as the sum of all three construction job types that add or remove residential units: new buildings, major alterations, and demolitions. These files can be used to determine the change in legal housing units across time and space.', 'displayType': 'href', 'downloadCount': 0, 'hideFromCatalog': False, 'hideFromDataJson': False, 'locked': False, 'newBackend': False, 'numberOfComments': 0, 'oid': 36735067, 'provenance': 'official', 'publicationAppendEnabled': False, 'publicationDate': 1616113006, 'publicationGroup': 18145468, 'publicationStage': 'published', 'rowsUpdatedAt': 1616112466, 'tableId': 18145468, 'totalTimesRated': 0, 'viewCount': 7208, 'viewLastModified': 1736541503, 'viewType': 'href', 'approvals': [{'reviewedAt': 1617849213, 'reviewedAutomatically': True, 'state': 'approved', 'submissionId': 3498760, 'submissionObject': 'public_audience_request', 'submissionOutcome': 'change_audience', 'submittedAt': 1617849213, 'targetAudience': 'public', 'workflowId': 2285, 'submissionDetails': {'permissionType': 'READ'}, 'submissionOutcomeApplication': {'endedAt': 1617849213, 'failureCount': 0, 'startedAt': 1617849213, 'status': 'success'}, 'submitter': {'id': 'd5dp-fses', 'displayName': 'afinkel'}}], 'clientContext': {'clientContextVariables': [], 'inheritedVariables': {}}, 'columns': [], 'grants': [{'inherited': False, 'type': 'viewer', 'flags': ['public']}], 'metadata': {'attachments': [{'filename': 'Housing_Database_Data_Dictionary.xlsx', 'assetId': 'bf0ba81b-227b-4194-9708-3e4b470aaf54', 'name': 'Housing_Database_Data_Dictionary.xlsx'}], 'additionalAccessPoints': [{'urls': {'webpage': 'https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww1.nyc.gov%2Fsite%2Fplanning%2Fdata-maps%2Fopen-data%2Fdwn-housing-database.page%23housingdevelopmentproject&data=04%7C01%7Cafinkel%40doitt.nyc.gov%7Cc592232fffcb414a833f08d8e96f457c%7C73d61799c28440228d4154cc4f1929ef%7C0%7C0%7C637516013145865388%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=HFR5PnBZhlfY5VAFJSif3xtEaUUxoVIhDQwpK0bjIT4%3D&reserved=0'}, 'title': 'Housing Database'}], 'custom_fields': {'Update': {'Automation': 'N/A', 'Date Made Public': '4/7/2021', 'Update Frequency': 'Every 6 months'}, 'Dataset Information': {'Agency': 'Department of City Planning (DCP)'}}, 'accessPoints': {'webpage': 'https://gcc02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww1.nyc.gov%2Fsite%2Fplanning%2Fdata-maps%2Fopen-data%2Fdwn-housing-database.page%23housingdevelopmentproject&data=04%7C01%7Cafinkel%40doitt.nyc.gov%7Cc592232fffcb414a833f08d8e96f457c%7C73d61799c28440228d4154cc4f1929ef%7C0%7C0%7C637516013145865388%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=HFR5PnBZhlfY5VAFJSif3xtEaUUxoVIhDQwpK0bjIT4%3D&reserved=0'}, 'availableDisplayTypes': ['table', 'fatrow', 'page']}, 'owner': {'id': '5fuc-pqz2', 'displayName': 'NYC OpenData', 'profileImageUrlLarge': '/api/users/5fuc-pqz2/profile_images/LARGE', 'profileImageUrlMedium': '/api/users/5fuc-pqz2/profile_images/THUMB', 'profileImageUrlSmall': '/api/users/5fuc-pqz2/profile_images/TINY', 'screenName': 'NYC OpenData', 'type': 'interactive', 'flags': ['acceptedEula', 'mayBeStoriesCoOwner']}, 'query': {}, 'rights': ['read'], 'tableAuthor': {'id': '5fuc-pqz2', 'displayName': 'NYC OpenData', 'profileImageUrlLarge': '/api/users/5fuc-pqz2/profile_images/LARGE', 'profileImageUrlMedium': '/api/users/5fuc-pqz2/profile_images/THUMB', 'profileImageUrlSmall': '/api/users/5fuc-pqz2/profile_images/TINY', 'screenName': 'NYC OpenData', 'type': 'interactive', 'flags': ['acceptedEula', 'mayBeStoriesCoOwner']}, 'tags': ['housing', 'house', 'building', 'development', 'dwelling unit', 'alteration', 'demolition', 'certificate of occupancy', 'co', 'permit', 'job application', 'filing', 'net units', 'unit change', 'hotel', 'class b', 'class a', 'pipeline', 'existing units', 'proposed units', 'construction'], 'flags': ['default', 'ownerMayBeContacted']}
_i7 = 'print(type(response))'
_i8 = '# Define shared dataset configurations\nSHARED_DATASET_CONFIGS = {\n    "prefix": PROJECT_DATA,\n    "cols_to_drop": [ # These columns are dropped from all datasets because I decided I won\'t need them\n        "id",\n        "sid",\n        "position",\n        "created_at",\n        "created_meta",\n        "updated_at",\n        "updated_meta",\n        "borough",\n        "meta",\n    ],\n    "cols_to_rename": {}, # These are columns that are to be renamed in all datasets\n    "lookup_columns": [],\n    "dtype_exceptions": { # These are columns that are to be cast to a specific data type\n        "zip_code": String,\n        "meta_data": String,\n        "postcode": String,\n        "calendar_date": Date,\n        "number": Integer,\n        "text": String,\n        "point": String,\n    },\n}\n\n# Define specific dataset configurations\nspecific_dataset_configs = {\n    "lien_data": {\n        "prefix": f"{PROJECT_DATA}/intermediate_files",\n        "cols_to_drop": [],\n        "cols_to_rename": {"BORO": "borough"},\n        "lookup_columns": [],\n        "dtype_exceptions": {},\n    },\n    "assessment_data": {\n        "prefix": f"{PROJECT_DATA}/intermediate_files",\n        "cols_to_drop": [],\n        "cols_to_rename": {\n            "BLDGCL": "building_class",\n            "TAXCLASS": "tax_class_code",\n            "Zip Codes": "zip_code",\n        },\n        "lookup_columns": ["building_class", "street_name", "owner", "zip_code"],\n        "dtype_exceptions": {},\n    },\n}'
SHARED_DATASET_CONFIGS = {'prefix': '/home/james/Massive/PROJECTDATA/nyc_real_estate_data', 'cols_to_drop': ['id', 'sid', 'position', 'created_at', 'created_meta', 'updated_at', 'updated_meta', 'borough', 'meta'], 'cols_to_rename': {}, 'lookup_columns': [], 'dtype_exceptions': {'zip_code': <class 'sqlalchemy.sql.sqltypes.String'>, 'meta_data': <class 'sqlalchemy.sql.sqltypes.String'>, 'postcode': <class 'sqlalchemy.sql.sqltypes.String'>, 'calendar_date': <class 'sqlalchemy.sql.sqltypes.Date'>, 'number': <class 'sqlalchemy.sql.sqltypes.Integer'>, 'text': <class 'sqlalchemy.sql.sqltypes.String'>, 'point': <class 'sqlalchemy.sql.sqltypes.String'>}}
specific_dataset_configs = {'lien_data': {'prefix': '/home/james/Massive/PROJECTDATA/nyc_real_estate_data/intermediate_files', 'cols_to_drop': [], 'cols_to_rename': {'BORO': 'borough'}, 'lookup_columns': [], 'dtype_exceptions': {}}, 'assessment_data': {'prefix': '/home/james/Massive/PROJECTDATA/nyc_real_estate_data/intermediate_files', 'cols_to_drop': [], 'cols_to_rename': {'BLDGCL': 'building_class', 'TAXCLASS': 'tax_class_code', 'Zip Codes': 'zip_code'}, 'lookup_columns': ['building_class', 'street_name', 'owner', 'zip_code'], 'dtype_exceptions': {}}}
_i9 = 'import types\nimport builtins\n\n\n# Custom serializer for complex objects\ndef safe_repr(obj):\n    if isinstance(obj, type):  # For classes, return their name\n        return f"{obj.__module__}.{obj.__name__}"\n    elif isinstance(obj, types.ModuleType):  # Skip modules, already handled\n        return None\n    else:\n        try:\n            return repr(obj)\n        except Exception:\n            return str(obj)  # Default fallback for complex objects\n\n\n# Filter out IPython-specific objects and other unwanted objects\ndef is_ipython_object(obj_name):\n    ipython_keywords = [\n        "get_ipython",\n        "In",\n        "Out",\n        "set_next_input",\n        "_ih",\n        "_oh",\n        "_dh",\n        "display",\n        "exit",\n        "quit",\n        "run_line_magic",\n        "run_cell_magic",\n        "run_cell",\n        "run",\n        "push",\n        "magic",\n        "callbacks",\n        "system",\n        "expose_magic",\n        "syspath",\n        "raw_input",\n        "builtins",\n        "__builtins__",\n    ]\n    return any(keyword in obj_name for keyword in ipython_keywords)\n\n\n# Save only explicitly defined variables, excluding IPython objects and other unwanted ones\nuser_defined_vars = {\n    key: value\n    for key, value in globals().items()\n    if not key.startswith("__")\n    and not is_ipython_object(key)\n    and not isinstance(\n        value,\n        (\n            types.ModuleType,\n            types.FunctionType,\n            types.BuiltinFunctionType,\n            types.LambdaType,\n        ),\n    )\n}\n\n# Writing to a file\nwith open("session_backup.py", "w") as f:\n    for key, value in user_defined_vars.items():\n        repr_value = safe_repr(value)\n        if repr_value is not None:  # Skip values that cannot be represented safely\n            f.write(f"{key} = {repr_value}\\n")'
